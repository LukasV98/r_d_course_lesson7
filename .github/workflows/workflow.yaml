name: Terraform CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: eu-central-1
  TF_VERSION: 1.5.0
  IMAGE_NAME: custom-web

jobs:
  test-web:
    runs-on: ubuntu-latest

    steps:
      - name: Check Repository
        uses: actions/checkout@v5

      - name: Get Chromium
        working_directory: ./tests/go_tests
        run: |
          wget "https://storage.googleapis.com/chrome-for-testing-public/139.0.7258.68/linux64/chrome-linux64.zip"
          unzip chromedriver_linux64.zip

      - name: GoLang Install
        run: sudo snap install go  --classic

      - name: GoLang Init
        run: go mod init

      - name: GoLang Run Test
        run: go run tests.go


  build-and-test-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Check Repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          echo 🐳 Buildování Docker image...;
          docker build -t \${{ env.IMAGE_NAME }}:latest .
          docker build -t \${{ env.IMAGE_NAME }}:\${{ github.sha }} .

      - name: List Docker images
        run: |
          echo 🐳 Seznam vytvořených images:
          docker images | grep \${{ env.IMAGE_NAME }}

  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        working-directory: ./terraform
        id: init
        run: terraform init

      - name: Terraform Validate
        working-directory: ./terraform
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: ./terraform
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          ACTOR: ${{ github.actor }}
          EVENT_NAME: ${{ github.event_name }}
          FMT: ${{ steps.fmt.outcome }}
          INIT: ${{ steps.init.outcome }}
          VALIDATE: ${{ steps.validate.outcome }}
          PLAN_STATUS: ${{ steps.plan.outcome }}
        with:
          ## github-token: ${{ secrets.GITHUB_TOKEN }}
          script: ''

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ./terraform
        run: terraform apply -auto-approve -input=false

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        run: |
          ecr_url=$(cd terraform && terraform output -raw ecr_repository_url)
          sha=${{ github.sha }}
          
          docker build -t $ecr_url:latest .
          docker build -t $ecr_url:$sha .
          
          echo "�� Pushing images to ECR..."
          
          docker push $ecr_url:latest
          docker push $ecr_url:$sha
          
          echo "✅ Images pushed successfully!"
          echo "Repository URL:$ecr_url"

      - name: Get Load Balancer URL
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ./terraform
        id: lb_url
        run: |
          LB_URL=$(terraform output -raw load_balancer_url)
          echo "url=$LB_URL" >> $GITHUB_OUTPUT
          echo "Load Balancer URL: $LB_URL"

      - name: Test Application
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Waiting for ECS service to be stable..."
          sleep 60
          
          echo "Testing application availability..."
          for i in {1..10}; do
            if curl -f "${{ steps.lb_url.outputs.url }}"; then
              echo "Application is responding!"
              break
            else
              echo "Attempt $i failed, retrying in 30 seconds..."
              sleep 30
            fi
          done

